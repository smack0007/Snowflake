Script = ( <Statement> )* EOF ;

StatementBlock = "{" <Statement>* "}" ;

Statement = <UsingDeclaration> ";" |
            <ConstDeclaration> ";" |
            <VariableDeclaration> ";" |
			<If> |
			<While> |
			<For> |
			<ForEach> |
			<Return> |
            <Yield> |
			<Expression> ";" ;

UsingDeclaration = "using" <NamespaceName> ;

ConstDeclaration = "const" <Identifier> "=" <Expression> ;

VariableDeclaration = "var" <Identifier> ( "=" <Expression> )? ;

FunctionParameters = <Identifier>? ( "," <Identifier> )* ;

If = "if" "(" <Expression> ")" <StatementBlock> { "else" <StatementBlock> } ;

While = "while" "(" <Expression> ")" <StatementBlock> ;

For = "for" "(" ( <VariableDeclaration> | <Assignment> ) ";" <Expression> ";" <Assignment>  ")" <StatementBlock> ;

ForEach = "foreach" "(" <VariableDeclaration> "in" <Expression>  ")" <StatementBlock> ;

Return = "return" <Expression> ";" ;

Yield = "yield" <Expression> ";" ;

Expression = <AssignmentExpression> ;

AssignmentExpression = <LogicalOrExpression> | <Assignment> ;

LogicalOrExpression = <LogicalAndExpression> ( "||" <LogicalAndExpression> )* ;

LogicalAndExpression = <EqualityExpression> ( "&&" <EqualityExpression> )* ;

EqualityExpression = <RelationalExpression> ( ( "==" | "!=" ) <RelationalExpression> )* ;

RelationalExpression = <AdditiveExpression> ( ( ( "<" | "<=" | ">" | ">=" ) <AdditiveExpression> ) | <GenericTypeAccess> )? ;

AdditiveExpression = <MultiplicativeExpression> ( ( "+" | "-" ) <MultiplicativeExpression> )* ;

MultiplicativeExpression = <UnaryExpression> ( ( "*" | "/" ) <UnaryExpression> )* ;

UnaryExpression = ( ( "-" | "!" ) <UnaryExpression> )* | <PrimaryExpression> ;

PrimaryExpression = "(" <Expression> ")" |
					<Function> |
					<ConstructorCall> |
					<FunctionCall> |
					<List> |
					<Array> |
					<Dictionary> |
					<MemberAccess> |
					<PostfixOperation> |
					<Identifier> |
					<Value> ;

Assignment = <AssignmentTarget> <AssignmentOperation> <Expression> ;

AssignmentTarget = <Identifier> | <MemberAccess> ;

AssignmentOperation = "=" | "+=" | "-=" | "*=" | "/=" ;

Function = "func" ( "*" ) "(" <FunctionParameters> ")" <StatementBlock> ;

FunctionCall = <Expression> "(" ( <Expression> ("," <Expression>)* )? ")" ;

ConstructorCall = "new" <TypeName> "(" ( <Expression> ("," <Expression>)* )? ")" ;

GenericTypeAccess = <Expression> <GenericArgsList> ;

NamespaceName = <Identifier> ( "." <Identifier> )* ;

TypeName = ( "(" <Expression> ")" | <Identifier> ( "." <Identifier> )* ) <GenericArgsList>? ;

GenericArgsList = "<" <TypeName> ( "," <TypeName> )* ">" ;

List = "[" <Expression>? ( "," <Expression> )* "]" ;

Array = "[|" <Expression>? ( "," <Expression> )* "|]" ;

Dictionary = "{" <DictionaryPair>? ( "," <DictionaryPair> )* "}" ;

DictionaryPair = ( <Identifier> | <Expression> ) ":" <Expression> ;

MemberAccess = <Expression> "." <Identifier> ( "(" ( <Expression> ( "," <Expression> )* )? ")" )? ;

PostfixOperation = <Expression> ( "++" | "--" ) ;

ElementAccess = <Expression> "[" <Expression> "]" ;

Identifier = [A-Za-z_][A-Za-z0-9_]* ;

Value = <Null> | <Boolean> | <String> | <Char> | <Integer> | <Float> ;

Null = "null" ;

Boolean = "true" | "false" ;

String = "\"" <chars>* "\"" ;

Integer = [1-9]* ;

Float = [1-9]*[.][1-9]* ;
