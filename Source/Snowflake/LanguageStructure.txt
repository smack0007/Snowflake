Script = <Statement>* EOF ;

StatementBlock = "{" <Statement>* "}" ;

Statement = <VariableDeclaration> ";" |
            <FunctionDeclaration> |
			<Assignment> ";" |
			<If> |
			<While> |
			<Return> |
			<Expression> ";" ;

VariableDeclaration = "var" <Identifier> { "=" <Expression> } ;

FunctionDeclaration = "func" <Identifier> "(" <FunctionParameters>  ")" <StatementBlock> ;

FunctionParameters = <Identifier> ( "," <Identifier> )+ ;

Assignment = <Identifier> <AssignmentOperation> <Expression> ;

AssignmentOperation = "=" | "+=" | "-=" | "*=" | "/=" ;

If = "if" "(" <Expression> ")" <StatementBlock> { "else" <StatementBlock> } ;

While = "while" "(" <Expression> ")" <StatementBlock> ;

For = "for" "(" ( <VariableDeclaration> | <Assignment> ) ";" <Expression> ";" <Assignment>  ")" <StatementBlock> ;

Return = "return" <Expression> ";" ;

Expression = <ConditionalOrExpression> ;

ConditionalOrExpression = <ConditionalAndExpression> ( "||" <ConditionalAndExpression> )* ;

ConditionalAndExpression = <EqualityExpression> ( "&&" <EqualityExpression> )* ;

EqualityExpression = <RelationalExpression> ( ( "==" | "!=" ) <RelationalExpression> )* ;

RelationalExpression = <AdditiveExpression> ( ( "<" | "<=" | ">" | ">=" ) <AdditiveExpression> )* ;

AdditiveExpression = <MultiplicativeExpression> ( ( "+" | "-" ) <MultiplicativeExpression> )* ;

MultiplicativeExpression = <PrimaryExpression> ( ( "*" | "/" ) <MultiplicativeExpression> )* ;

PrimaryExpression = "(" <Expression> ")" | "-" <Expression> | <AnonymousFunction> | <FunctionCall> | <Identifier> | <Value> ;

AnonymousFunction = "func" "(" <FunctionParameters> ")" <StatementBlock> ;

FunctionCall = <Expression> "(" { <Expression> ("," <Expression>)* } ")" ;

Identifier = [A-Za-z_][A-Za-z0-9_]* ;

Value = <Undefined> | <Null> | <Boolean> | <String> | <Char> | <Integer> | <Float> ;

Undefined = "undef" ;

Null = "null" ;

Boolean = "true" | "false" ;

String = "\"" <chars>* "\"" ;

Integer = [1-9]* ;

Float = [1-9]*[.][1-9]* ;



